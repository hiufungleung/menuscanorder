name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ vars.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop and remove existing container
          docker stop menuscanorder-app || true
          docker rm menuscanorder-app || true
          
          # Pull latest image
          docker pull ${{ vars.DOCKER_IMAGE_NAME }}:latest
          
          # Run new container with environment variables
          docker run -d \
            --name menuscanorder-app \
            --restart unless-stopped \
            -p ${{ vars.APP_PORT }}:80 \
            -e CI_ENVIRONMENT=production \
            -e app.baseURL=${{ vars.APP_BASE_URL }} \
            -e database.default.hostname=${{ secrets.DB_HOSTNAME }} \
            -e database.default.database=${{ secrets.DB_DATABASE }} \
            -e database.default.username=${{ secrets.DB_USERNAME }} \
            -e database.default.password=${{ secrets.DB_PASSWORD }} \
            -e database.default.port=${{ secrets.DB_PORT }} \
            -e database.default.DBDriver=MySQLi \
            -e encryption.key=${{ secrets.ENCRYPTION_KEY }} \
            ${{ vars.DOCKER_IMAGE_NAME }}:latest
          
          # Clean up unused images
          docker image prune -f
          
          # Check container status
          docker ps --filter name=menuscanorder-app
          
          # Show recent logs to verify startup
          docker logs --tail=20 menuscanorder-app